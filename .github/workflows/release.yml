name: Release

on:
  workflow_dispatch:
  pull_request:
    # a closed PR runs on the commit that was merged back into main
    types: [closed]
    branches:
      - main

permissions:
  contents: read
  pull-requests: write  # Needed for creating PRs

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      bump_type: ${{ steps.validate.outputs.bump_type }}
      dev_release: ${{ steps.validate.outputs.dev_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate PR template
        id: validate
        shell: bash
        run: |
          BUMP_TYPE=none
          
          # For pull requests, check if it was merged
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Only proceed if the PR was merged
            if [[ "${{ github.event.pull_request.merged }}" != "true" ]]; then
              echo "Pull request was closed without merging, skipping release"
              BUMP_TYPE=none
              echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            PR_BODY="${{ github.event.pull_request.body }}"
                
            if ! echo "$PR_BODY" | grep -q "\[.\] MAJOR:" && \
              ! echo "$PR_BODY" | grep -q "\[.\] MINOR:" && \
              ! echo "$PR_BODY" | grep -q "\[.\] PATCH:" && \
              ! echo "$PR_BODY" | grep -q "\[.\] NONE:"; then
                echo "Error: PR template is missing version bump fields"
                echo "Expected fields:"
                echo "  [ ] MAJOR:"
                echo "  [ ] MINOR:"
                echo "  [ ] PATCH:"
                echo "  [ ] NONE:"
                echo "Assuming no bump intended"
                BUMP_TYPE=none
            else
                # Check if exactly one version bump option is selected
                SELECTED_COUNT=$(echo "$PR_BODY" | grep -c "\[\\S\] \(MAJOR\|MINOR\|PATCH\|NONE\):")
                echo "Found $SELECTED_COUNT selected options"
                
                if [ "$SELECTED_COUNT" -ne 1 ]; then
                  echo "Error: Exactly one version bump option must be selected"
                  echo "Selected options:"
                  echo "$PR_BODY" | grep "\[\\S\]" || true
                  exit 1
                fi
                
                if echo "$PR_BODY" | grep -q "\[\\S\] MAJOR:"; then
                    echo "Selected: MAJOR version bump"
                    BUMP_TYPE=major
                elif echo "$PR_BODY" | grep -q "\[\\S\] MINOR:"; then
                    echo "Selected: MINOR version bump"
                    BUMP_TYPE=minor
                elif echo "$PR_BODY" | grep -q "\[\\S\] PATCH:"; then
                    echo "Selected: PATCH version bump"
                    BUMP_TYPE=patch
                else
                    echo "Selected: NO version bump"
                    BUMP_TYPE=none
                fi
            fi
          else # not a PR
            echo "Manual workflow dispatch detected, proceeding with dev release"
            BUMP_TYPE=dev
          fi
              
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            DEV_RELEASE=true
          else
            DEV_RELEASE=false
          fi
          
          echo "dev_release=$DEV_RELEASE" >> $GITHUB_OUTPUT

  version:
    needs: [validate]
    if: ${{ needs.validate.outputs.bump_type != 'none' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    container:
      image: ghcr.io/ballast-dev/timbre
      credentials:
        username: krakjn
        password: ${{ secrets.TIMBRE_TOKEN }}
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      changelog: ${{ steps.changelog.outputs.content }}
      dev_changelog: ${{ steps.dev_changelog.outputs.content }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Git
        run: |
          # Prevent ownership errors in container environments
          git config --global --add safe.directory "${GITHUB_WORKSPACE}"
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
          # Ensure we can push changes
          git remote -v || true
          if ! git remote -v | grep -q origin; then
            git remote add origin "https://x-access-token:${{ secrets.TIMBRE_TOKEN }}@github.com/ballast-dev/timbre.git"
          fi
      
      - name: Parse version
        id: parse_version
        shell: bash # sh doesn't support BASH_REMATCH
        run: |
          CURRENT_VERSION=$(cat pkg/version.txt | tr -d '[:space:]')
          
          # Extract semantic version parts using regex
          if [[ "$CURRENT_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then

            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            
            echo "major=$MAJOR" >> $GITHUB_OUTPUT
            echo "minor=$MINOR" >> $GITHUB_OUTPUT
            echo "patch=$PATCH" >> $GITHUB_OUTPUT
            
          else
            echo "Error: Version format is invalid. Expected format: X.Y.Z"
            echo "Current version: $CURRENT_VERSION"
            exit 1
          fi
      
      - name: Bump version
        id: bump
        shell: bash
        run: |
          BUMP_TYPE="${{ needs.validate.outputs.bump_type }}"
          MAJOR="${{ steps.parse_version.outputs.major }}"
          MINOR="${{ steps.parse_version.outputs.minor }}"
          PATCH="${{ steps.parse_version.outputs.patch }}"

          case "$BUMP_TYPE" in
            "major")
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            "minor")
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            "patch")
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
            "dev")
              NEW_VERSION="$MAJOR.$MINOR.$PATCH+$(git rev-parse --short=8 HEAD)"
              echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
              exit 0  # don't write to version file
              ;;
          esac

          echo "BUMP_TYPE=$BUMP_TYPE, NEW_VERSION=$NEW_VERSION"

          # Write the new version to the version file
          # always write a clean semver to pkg/version.txt
          echo "$NEW_VERSION" > pkg/version.txt
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      
      # Only merge commits get a tag
      - name: Create Release Branch
        id: release_branch
        if: >-
          ${{ github.event_name == 'pull_request'
            && github.event.pull_request.merged == true
            && needs.validate.outputs.bump_type != 'dev'
            && needs.validate.outputs.bump_type != 'none' }}
        shell: bash
        run: |
          # Authenticate with GitHub CLI
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          RELEASE_BRANCH="release/$NEW_VERSION"
          
          # Create a release branch from main
          git fetch origin main
          git checkout -b $RELEASE_BRANCH origin/main
          
          PREV_TAG=$(git describe --tags --abbrev=0)
          
          # Update version in the file
          echo "$NEW_VERSION" > pkg/version.txt
          
          # Generate changelog from previous tag to current
          auto-changelog --config cfg/auto-changelog --starting-version $PREV_TAG --output RELEASE_NOTES.md
          auto-changelog --config cfg/auto-changelog --output CHANGELOG.md
          
          # Commit the changelog and version bump
          git add CHANGELOG.md pkg/version.txt
          git commit -m "chore: release $NEW_VERSION"
          
          # Create annotated tag on this commit
          git tag -a "$NEW_VERSION" -m "Release: $NEW_VERSION"
          
          # Push the branch and tag
          git push origin $RELEASE_BRANCH
          git push origin "$NEW_VERSION"
          
          # Create a PR from release branch to main
          PR_URL=$(gh pr create --title "Release $NEW_VERSION" \
                     --body "Automated release PR for version $NEW_VERSION" \
                     --base main \
                     --head $RELEASE_BRANCH \
                     --label "release")
          
          # Auto-merge the PR
          PR_NUMBER=$(echo $PR_URL | grep -o '[0-9]*$')
          if [ ! -z "$PR_NUMBER" ]; then
            echo "Created PR #$PR_NUMBER, attempting to merge it"
            gh pr merge $PR_NUMBER --merge --delete-branch --admin
          else
            echo "Could not extract PR number from: $PR_URL"
          fi
          
          # Store changelog content for release body
          echo "content<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate Dev Release Notes
        id: dev_changelog
        if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0)
          auto-changelog --config cfg/auto-changelog --starting-commit $PREV_TAG --output RELEASE_NOTES.md
          
          echo "content<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Build freshly bumped version
      - name: Build packages
        run: |
          zig build all --release=fast
          zig build package --release=fast
      
      - name: Install and verify package
        shell: bash
        run: |
          # Verify AMD64 package
          if ! dpkg -i zig-out/pkg/*amd64.deb; then
            echo "Failed to install AMD64 package"
            exit 1
          fi
          
          # Note: ARM64 package can't be verified in AMD64 container
          # but we can check if it exists
          if [ ! -f zig-out/pkg/*arm64.deb ]; then
            echo "ARM64 package not found"
            exit 1
          fi
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: timbre-artifacts
          path: |
            zig-out/pkg/*.deb
            zig-out/aarch64-linux-musl/timbre
            zig-out/x86_64-linux-musl/timbre
            zig-out/aarch64-macos/timbre
            zig-out/x86_64-macos/timbre
            zig-out/aarch64-windows/timbre.exe
            zig-out/x86_64-windows/timbre.exe
          retention-days: 7

  release:
    needs: [validate, version]
    if: ${{ needs.validate.outputs.bump_type != 'none' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      changelog: ${{ needs.version.outputs.changelog }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: timbre-artifacts

      - name: Prepare Release Assets
        id: prepare
        run: |
          VERSION="${{ needs.version.outputs.new_version }}"
          if ${{ needs.validate.outputs.bump_type == 'dev' }}; then
            VERSION="${{ needs.version.outputs.dev_version }}"
          fi

          mkdir release
          # give the files better names
          mv aarch64-linux-musl/timbre "release/timbre-${VERSION}-linux-arm64"
          mv x86_64-linux-musl/timbre "release/timbre-${VERSION}-linux-x86_64"
          mv aarch64-macos/timbre "release/timbre-${VERSION}-macos-arm64"
          mv x86_64-macos/timbre "release/timbre-${VERSION}-macos-x86_64"
          mv aarch64-windows/timbre.exe "release/timbre-${VERSION}-windows-arm64.exe"
          mv x86_64-windows/timbre.exe "release/timbre-${VERSION}-windows-x86_64.exe"
          mv pkg/*.deb "release/"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            release/*
          draft: ${{ needs.validate.outputs.bump_type == 'dev' }}
          prerelease: false
          tag_name: ${{ needs.version.outputs.new_version }}
          body: |
            if ${{ needs.validate.outputs.bump_type == 'dev' }}; then
              ${{ needs.version.outputs.dev_changelog }}
            else
              ${{ needs.version.outputs.changelog }}
            fi
