name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      skip_release: ${{ steps.validate.outputs.skip_release }}
      bump_type: ${{ steps.validate.outputs.bump_type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate PR template
        id: validate
        run: |
          BUMP_TYPE=none
          SKIP_RELEASE=false
          
          # For pull requests, check if it was merged
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Only proceed if the PR was merged
            if [[ "${{ github.event.pull_request.merged }}" != "true" ]]; then
              echo "Pull request was closed without merging, skipping release"
              BUMP_TYPE=none
              SKIP_RELEASE=true
              echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
              echo "skip_release=$SKIP_RELEASE" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            PR_BODY="${{ github.event.pull_request.body }}"
                
            if ! echo "$PR_BODY" | grep -q "\[.\] MAJOR:" && \
              ! echo "$PR_BODY" | grep -q "\[.\] MINOR:" && \
              ! echo "$PR_BODY" | grep -q "\[.\] PATCH:" && \
              ! echo "$PR_BODY" | grep -q "\[.\] NONE:"; then
                echo "Error: PR template is missing version bump fields"
                echo "Expected fields:"
                echo "  [ ] MAJOR:"
                echo "  [ ] MINOR:"
                echo "  [ ] PATCH:"
                echo "  [ ] NONE:"
                echo "Assuming no bump intended"
                BUMP_TYPE=none
                SKIP_RELEASE=true
            else
                # Check if exactly one version bump option is selected
                SELECTED_COUNT=$(echo "$PR_BODY" | grep -c "\[\\S\]")
                echo "Found $SELECTED_COUNT selected options"
                
                if [ "$SELECTED_COUNT" -ne 1 ]; then
                  echo "Error: Exactly one version bump option must be selected"
                  echo "Selected options:"
                  echo "$PR_BODY" | grep "\[\\S\]" || true
                  exit 1
                fi
                
                if echo "$PR_BODY" | grep -q "\[\\S\] MAJOR:"; then
                    echo "Selected: MAJOR version bump"
                    BUMP_TYPE=major
                elif echo "$PR_BODY" | grep -q "\[\\S\] MINOR:"; then
                    echo "Selected: MINOR version bump"
                    BUMP_TYPE=minor
                elif echo "$PR_BODY" | grep -q "\[\\S\] PATCH:"; then
                    echo "Selected: PATCH version bump"
                    BUMP_TYPE=patch
                else
                    echo "Selected: NO version bump"
                    BUMP_TYPE=none
                    SKIP_RELEASE=true
                fi
            fi
          else
            # For workflow_dispatch, always proceed with build release
            echo "Manual workflow dispatch detected, proceeding with BUILD version bump"
            BUMP_TYPE=build
            SKIP_RELEASE=false
          fi
              
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "skip_release=$SKIP_RELEASE" >> $GITHUB_OUTPUT

  version:
    needs: [validate]
    if: ${{ needs.validate.outputs.skip_release != 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    container:
      image: ghcr.io/krakjn/timbre
      credentials:
        username: krakjn
        password: ${{ secrets.TIMBRE_TOKEN }}
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TIMBRE_TOKEN }}
      
      - name: Setup Git
        run: |
          # Prevent ownership errors in container environments
          git config --global --add safe.directory "${GITHUB_WORKSPACE}"
          
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
          
          # Ensure we can push changes
          git remote -v || true
          if ! git remote -v | grep -q origin; then
            git remote add origin "https://x-access-token:${{ secrets.TIMBRE_TOKEN }}@github.com/krakjn/timbre.git"
          fi
      
      - name: Parse version
        id: parse_version
        shell: bash # sh doesn't support BASH_REMATCH
        run: |
          CURRENT_VERSION=$(cat pkg/version.txt | tr -d '[:space:]')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Extract semantic version parts using regex
          if [[ "$CURRENT_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(\+([0-9]+))?$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            BUILD="${BASH_REMATCH[5]:-}"
            
            echo "major=$MAJOR" >> $GITHUB_OUTPUT
            echo "minor=$MINOR" >> $GITHUB_OUTPUT
            echo "patch=$PATCH" >> $GITHUB_OUTPUT
            echo "build=$BUILD" >> $GITHUB_OUTPUT
            
            if [ -n "$BUILD" ]; then
              echo "is_build_version=true" >> $GITHUB_OUTPUT
            else
              echo "is_build_version=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Error: Version format is invalid. Expected format: X.Y.Z or X.Y.Z+N"
            echo "Current version: $CURRENT_VERSION"
            exit 1
          fi
      
      - name: Bump version
        id: bump
        run: |
          BUMP_TYPE="${{ needs.validate.outputs.bump_type }}"
          MAJOR="${{ steps.parse_version.outputs.major }}"
          MINOR="${{ steps.parse_version.outputs.minor }}"
          PATCH="${{ steps.parse_version.outputs.patch }}"
          
          if [ "$BUMP_TYPE" = "build" ]; then
            # For workflow_dispatch, add build number
            NEW_BUILD_NUMBER=$(git rev-list --count HEAD)
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}+${NEW_BUILD_NUMBER}"
            echo "Bumping build number: $NEW_VERSION"
          else
            # For pull requests, bump according to the selected type
            case "$BUMP_TYPE" in
              "major")
                NEW_VERSION="$((MAJOR + 1)).0.0"
                ;;
              "minor")
                NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
                ;;
              "patch")
                NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
                ;;
              *)
                NEW_VERSION="$MAJOR.$MINOR.$PATCH"  # no bump
                ;;
            esac
            echo "Bumping version: $NEW_VERSION"
          fi
          
          echo "$NEW_VERSION" > pkg/version.txt
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Commit version bump with changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            auto-changelog \
              --template keepachangelog \
              --output CHANGELOG.md \
              --commit-limit false \
              --unreleased true \
              --hide-credit true \
              --starting-version $PREV_TAG
          else
            auto-changelog \
              --template keepachangelog \
              --output CHANGELOG.md \
              --commit-limit false \
              --unreleased true \
              --hide-credit true
          fi
          
          git add CHANGELOG.md pkg/version.txt
          git commit -m "chore: release ${{ steps.bump.outputs.new_version }}"
          
          # Push to the appropriate branch
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For merged PRs, push to the target branch (main)
            git push origin HEAD:main
          else
            # For workflow_dispatch, push to the current branch
            git push origin HEAD:${GITHUB_REF#refs/heads/}
          fi
      
      - name: Create Git tag
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          git push origin "$NEW_VERSION"

      # Build freshly bumped version
      - name: Build debian package
        run: |
          make deb BUILD_TYPE=Release
      
      - name: Install and verify package
        shell: bash
        run: |
          if ! dpkg -i build/*.deb; then
            echo "Failed to install package"
            exit 1
          fi
          
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected version: $EXPECTED_VERSION"
          
          if ! version_output=$(timbre --version); then
            echo "Failed to run timbre --version"
            exit 1
          fi
          echo "Actual version output: $version_output"
          
          if [[ "$version_output" =~ ([0-9]+\.[0-9]+\.[0-9]+(\+[0-9]+)?) ]]; then
            ACTUAL_VERSION="${BASH_REMATCH[1]}"
            echo "Extracted version: $ACTUAL_VERSION"
            
            if [ "$ACTUAL_VERSION" != "$EXPECTED_VERSION" ]; then
              echo "Version mismatch!"
              echo "Expected: $EXPECTED_VERSION"
              echo "Actual:   $ACTUAL_VERSION"
              exit 1
            fi
          else
            echo "Failed to parse version from output: $version_output"
            exit 1
          fi
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: timbre-pkg
          path: |
            build/*.deb
            CHANGELOG.md
          retention-days: 7

  release:
    needs: [validate, version]
    if: ${{ needs.validate.outputs.skip_release != 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: timbre-pkg

      - name: Get changelog content
        id: changelog
        run: echo "content=$(cat CHANGELOG.md)" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/*.deb
            CHANGELOG.md
          draft: ${{ needs.validate.outputs.skip_release == 'true' }}
          prerelease: false
          tag_name: ${{ needs.version.outputs.new_version }}
          title: Release ${{ needs.version.outputs.new_version }}
          body: |
            ${{ steps.changelog.outputs.content }}

            ### Debian Package
            ```bash
            sudo dpkg -i timbre_${{ needs.version.outputs.new_version }}*.deb
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
