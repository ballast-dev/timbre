name: Release

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      skip_release: ${{ steps.validate.outputs.skip_release }}
      bump_type: ${{ steps.validate.outputs.bump_type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate PR template
        id: validate
        run: |
          BUMP_TYPE=none
          SKIP_RELEASE=false

          validate_pr() {
              local pr_body="$1"
              
              if ! echo "$pr_body" | grep -q "\[.\] MAJOR:" && \
                ! echo "$pr_body" | grep -q "\[.\] MINOR:" && \
                ! echo "$pr_body" | grep -q "\[.\] PATCH:" && \
                ! echo "$pr_body" | grep -q "\[.\] NONE:"; then
                  echo "Error: PR template is missing version bump fields"
                  echo "Expected fields:"
                  echo "  [ ] MAJOR:"
                  echo "  [ ] MINOR:"
                  echo "  [ ] PATCH:"
                  echo "  [ ] NONE:"
                  echo "Assuming no bump intended"
                  return 0
              fi
              
              # Check if exactly one version bump option is selected
              SELECTED_COUNT=$(echo "$pr_body" | grep -c "\[\\S\]")
              echo "Found $SELECTED_COUNT selected options"
              
              if [ "$SELECTED_COUNT" -ne 1 ]; then
                  echo "Error: Exactly one version bump option must be selected"
                  echo "Selected options:"
                  echo "$pr_body" | grep "\[\\S\]" || true
                  return 1
              fi
              
              if echo "$pr_body" | grep -q "\[\\S\] MAJOR:"; then
                  echo "Selected: MAJOR version bump"
                  BUMP_TYPE=major
              elif echo "$pr_body" | grep -q "\[\\S\] MINOR:"; then
                  echo "Selected: MINOR version bump"
                  BUMP_TYPE=minor
              elif echo "$pr_body" | grep -q "\[\\S\] PATCH:"; then
                  echo "Selected: PATCH version bump"
                  BUMP_TYPE=patch
              else
                  echo "Selected: NO version bump"
                  BUMP_TYPE=none
                  SKIP_RELEASE=true
              fi
              
              return 0
          }

          validate_pr $(jq -r '.pull_request.body' "$GITHUB_EVENT_PATH")
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "skip_release=$SKIP_RELEASE" >> $GITHUB_OUTPUT

  version:
    needs: validate
    if: |
      needs.validate.outcome == 'success' && 
      ${{ needs.validate.outputs.skip_release }} != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TIMBRE_TOKEN }}
      
      - name: Get current version
        id: get_version
        run: |
          VERSION=$(cat pkg/version.txt)
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Bump version
        if: github.event_name == 'pull_request'
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.current_version }}
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          case "${{ needs.validate.outputs.bump_type }}" in
            "major")
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            "minor")
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            "patch")
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac
          
          echo "$NEW_VERSION" > pkg/version.txt
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Bump build number
        if: github.event_name == 'workflow_dispatch'
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.current_version }}
          BUILD_NUMBER=$(git rev-list --count HEAD)
          NEW_VERSION="${CURRENT_VERSION}+${BUILD_NUMBER}"
          echo "$NEW_VERSION" > pkg/version.txt
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Commit version change
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
          git add pkg/version.txt
          git commit -m "chore: bump version to ${{ steps.get_version.outputs.new_version }}"
          git push origin HEAD:${{ github.head_ref }}
      
      - name: Create Git tag
        run: |
          git tag -a "${{ steps.get_version.outputs.new_version }}" -m "Release ${{ steps.get_version.outputs.new_version }}"
          git push origin "${{ steps.get_version.outputs.new_version }}"

  build:
    needs: [ version, validate ]
    if: |
      needs.validate.outcome == 'success' && 
      ${{ needs.validate.outputs.skip_release }} != 'true'
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/krakjn/timbre
      credentials:
        username: krakjn
        password: ${{ secrets.TIMBRE_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Build package
        run: |
          make deb BUILD_TYPE=Release
      
      - name: Install and verify package
        run: |
          if ! dpkg -i build/*.deb; then
            echo "Failed to install package"
            exit 1
          fi
          
          if ! version_output=$(timbre --version); then
            echo "Failed to run timbre --version"
            exit 1
          fi
          echo "Version check output: $version_output"
          
          if ! help_output=$(timbre --help); then
            echo "Failed to run timbre --help"
            exit 1
          fi
          echo "Help command output: $help_output"
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: timbre-deb
          path: build/*.deb
          retention-days: 7

  release:
    needs: [ build, validate ]
    if: |
      needs.validate.outcome == 'success' && 
      ${{ needs.validate.outputs.skip_release }} != 'true'
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/krakjn/timbre
      credentials:
        username: krakjn
        password: ${{ secrets.TIMBRE_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TIMBRE_TOKEN }}
      
      - name: Get version
        id: get_version
        run: |
          VERSION=$(cat pkg/version.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          if [[ $VERSION == *+* ]]; then
            echo "is_build=true" >> $GITHUB_OUTPUT
          else
            echo "is_build=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            auto-changelog \
              --template keepachangelog \
              --output CHANGELOG.md \
              --commit-limit false \
              --unreleased true \
              --hide-credit true \
              --starting-commit $PREV_TAG
          else
            auto-changelog \
              --template keepachangelog \
              --output CHANGELOG.md \
              --commit-limit false \
              --unreleased true \
              --hide-credit true
          fi
          
          git add CHANGELOG.md
          git commit -m "docs: update changelog for ${{ steps.get_version.outputs.version }}"
          git push origin HEAD:${{ github.head_ref }}
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: timbre-deb
          path: build
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/*.deb
            CHANGELOG.md
          draft: ${{ steps.get_version.outputs.is_build }}
          prerelease: false
          tag_name: ${{ steps.get_version.outputs.version }}
          title: Release ${{ steps.get_version.outputs.version }}
          body: |
            See CHANGELOG.md for details.
            
            ## Installation
            
            ### Debian Package
            ```bash
            sudo dpkg -i timbre_${{ steps.get_version.outputs.version }}*.deb
            ```
